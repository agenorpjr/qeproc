generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                              String          @id @default(cuid())
  email                           String
  password                        String
  createdAt                       DateTime?       @db.DateTime(0)
  emailVerified                   DateTime?
  image                           String?
  name                            String
  updatedAt                       DateTime?       @updatedAt @db.DateTime(0)
  username                        String?
  role                            String
  approver_id                     String          @unique(map: "approver_id_UNIQUE")
  accounts                        Account?
  Authenticator                   Authenticator[]
  sessions                        Session[]
  User                            User            @relation("UserToUser", fields: [approver_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_approver_id")
  other_User                      User?           @relation("UserToUser")
  drafts                          drafts[]
  orders_orders_approver_idToUser orders[]        @relation("orders_approver_idToUser")
  orders_orders_user_idToUser     orders[]        @relation("orders_user_idToUser")

  @@index([approver_id], map: "user_approver_id_idx")
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String   @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  user                     User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model companies {
  company_id Int      @id @default(autoincrement())
  company    String?  @db.VarChar(255)
  cnpj       Int
  drafts     drafts[]
  orders     orders[]
}

model cost_centers {
  cost_center_id Int    @id @default(autoincrement())
  cost_center    String @db.VarChar(250)
}

model delivery_addresses {
  address_id Int    @id @unique(map: "address_id_UNIQUE")
  address    String @db.VarChar(255)
}

model draft_products_list {
  draft_product_list_id Int      @id @default(autoincrement())
  draft_id              Int
  product_id            Int
  measure_id            Int
  quantity              Int
  reference             String?  @db.VarChar(255)
  obs                   String?  @db.VarChar(250)
  drafts                drafts   @relation(fields: [draft_id], references: [draft_id], onDelete: NoAction, onUpdate: NoAction, map: "dpl_draft_id")
  measures              measures @relation(fields: [measure_id], references: [measure_id], onDelete: NoAction, onUpdate: NoAction, map: "dpl_measure_id")
  products              products @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction, map: "dpl_product_id")

  @@index([draft_id], map: "draft_id_idx")
  @@index([measure_id], map: "measure_id_idx")
  @@index([product_id], map: "product_id_idx")
}

model drafts {
  draft_id            Int                   @id @default(autoincrement())
  draft_number        Int
  user_id             String
  company_id          Int?
  delivery_address    String?               @db.VarChar(255)
  cost_center_id      Int?
  project_id          Int?
  created_at          DateTime              @default(now()) @db.DateTime(0)
  delivery_at         DateTime?             @db.DateTime(0)
  draft_products_list draft_products_list[]
  companies           companies?            @relation(fields: [company_id], references: [company_id], onDelete: NoAction, onUpdate: NoAction, map: "d_company_id")
  User                User                  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "d_user_id")

  @@index([company_id], map: "d_company_id_idx")
  @@index([user_id], map: "d_user_id_idx")
}

model measures {
  measure_id          Int                   @id @default(autoincrement())
  measure             String                @db.VarChar(45)
  draft_products_list draft_products_list[]
  order_products_list order_products_list[]
}

model order_products_list {
  order_product_list_id                                    Int      @id @default(autoincrement())
  order_id                                                 Int
  product_id                                               Int
  measure_id                                               Int
  quantity                                                 Int
  reference                                                String?  @db.VarChar(255)
  obs                                                      String?  @db.VarChar(250)
  measures                                                 measures @relation(fields: [measure_id], references: [measure_id], onDelete: NoAction, onUpdate: NoAction, map: "opl_measure_id")
  orders_order_products_list_order_idToorders              orders   @relation("order_products_list_order_idToorders", fields: [order_id], references: [order_id], onDelete: NoAction, onUpdate: NoAction, map: "opl_order_id")
  products                                                 products @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction, map: "opl_product_id")
  orders_order_products_list_order_product_list_idToorders orders   @relation("order_products_list_order_product_list_idToorders", fields: [order_product_list_id], references: [order_id], onDelete: NoAction, onUpdate: NoAction, map: "opl_request_id")

  @@index([measure_id], map: "measure_id_idx")
  @@index([order_id], map: "order_id_idx")
  @@index([product_id], map: "product_id_idx")
  @@index([order_product_list_id], map: "request_id_idx")
}

model orders {
  order_id                                                              Int                   @id @default(autoincrement())
  order_number                                                          Int
  user_id                                                               String
  company_id                                                            Int
  delivery_address                                                      String                @db.VarChar(255)
  project_id                                                            Int?
  cost_center_id                                                        Int?
  approver_id                                                           String
  created_at                                                            DateTime              @default(now()) @db.DateTime(0)
  delivery_at                                                           DateTime              @db.DateTime(0)
  order_products_list_order_products_list_order_idToorders              order_products_list[] @relation("order_products_list_order_idToorders")
  order_products_list_order_products_list_order_product_list_idToorders order_products_list?  @relation("order_products_list_order_product_list_idToorders")
  User_orders_approver_idToUser                                         User                  @relation("orders_approver_idToUser", fields: [approver_id], references: [approver_id], onDelete: NoAction, onUpdate: NoAction, map: "o_approver_id")
  companies                                                             companies             @relation(fields: [company_id], references: [company_id], onDelete: NoAction, onUpdate: NoAction, map: "o_company_id")
  User_orders_user_idToUser                                             User                  @relation("orders_user_idToUser", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "o_user_id")

  @@index([approver_id], map: "o_approver_id_idx")
  @@index([company_id], map: "o_company_id_idx")
  @@index([user_id], map: "o_user_id_idx")
}

model products {
  product_id          Int                   @id @default(autoincrement())
  description         String                @db.VarChar(250)
  draft_products_list draft_products_list[]
  order_products_list order_products_list[]
}

model projects {
  project_id Int    @id @default(autoincrement())
  project    String @db.VarChar(250)
}
